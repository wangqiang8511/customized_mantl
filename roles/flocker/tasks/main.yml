---
- name: ensure customized bin
  sudo: yes
  file:
    path: /opt/bin
    state: directory
  when: flocker_mode == "control"
  tags:
    - docker
    - flocker

# Setup flocker apt repo
- name: install apt https tool
  sudo: yes
  apt: 
    pkg: "{{ item }}"
    state: present 
    update_cache: yes
  with_items:
    - apt-transport-https
    - software-properties-common
  tags:
    - docker
    - flocker
    - bootstrap

- name: add flocker apt-repo
  sudo: yes
  apt_repository:
    repo: "deb https://clusterhq-archive.s3.amazonaws.com/ubuntu/14.04/$(ARCH) /"
    state: present
  tags:
    - docker
    - flocker
    - bootstrap

- name: install flocker packages
  sudo: yes
  apt:
    name: "{{ item }}"
    state: present
    force: yes
  with_items:
    - clusterhq-flocker-node
    - clusterhq-flocker-cli
    - clusterhq-flocker-docker-plugin
  tags:
    - docker
    - flocker
    - bootstrap

# Generate the cert
- name: create cert dir 
  sudo: yes
  file:
    path: /etc/flocker
    state: directory
  tags:
    - docker
    - flocker

- name: setup flocker cluster cert
  sudo: yes
  copy:
    src: ssl/certs/flocker-cluster.crt
    dest: /etc/flocker/cluster.crt
  tags:
    - docker
    - flocker

- name: setup flocker cluster key
  sudo: yes
  copy:
    src: ssl/private/flocker-cluster.key
    dest: /etc/flocker/cluster.key
    mode: 0600
  tags:
    - docker
    - flocker

# Generate control service cert and key on node
- name: check flocker control service cert
  sudo: yes
  stat: path="/etc/flocker/control-service.crt"
  when: flocker_mode == "control"
  register: check_flocker_control_service_crt
  tags:
    - docker
    - flocker

- name: upload geneate control service cert script
  sudo: yes
  template:
    src: generate_control_service_certs.sh.j2
    dest: /opt/bin/generate_control_service_certs.sh
    mode: 0755
  when: flocker_mode == "control" and 
        check_flocker_control_service_crt.stat.exists == False
  tags:
    - docker
    - flocker

- name: generate flocker control service cert and key
  sudo: yes
  shell: /opt/bin/generate_control_service_certs.sh
  when: flocker_mode == "control" and 
        check_flocker_control_service_crt.stat.exists == False
  tags:
    - docker
    - flocker

# Generate node cert and key on node
- name: check flocker node cert
  sudo: yes
  stat: path="/etc/flocker/node.crt"
  register: check_flocker_node_crt
  when: flocker_mode == "agent"
  tags:
    - docker
    - flocker

- name: upload geneate node cert script
  sudo: yes
  template:
    src: generate_node_certs.sh.j2
    dest: /opt/bin/generate_node_certs.sh
    mode: 0755
  when: flocker_mode == "agent" and 
        check_flocker_node_crt.stat.exists == False
  tags:
    - docker
    - flocker

- name: generate flocker node cert and key
  sudo: yes
  shell: /opt/bin/generate_node_certs.sh
  when: flocker_mode == "agent" and 
        check_flocker_node_crt.stat.exists == False
  tags:
    - docker
    - flocker

- name: setup plugin cert in agent node
  sudo: yes
  copy:
    src: ssl/certs/flocker-plugin.crt
    dest: /etc/flocker/plugin.crt
  when: flocker_mode == "agent"
  notify:
    - restart flocker dataset agent service
    - restart flocker container agent service
    - restart flocker docker plugin
  tags:
    - docker
    - flocker

- name: setup plugin key in agent node
  sudo: yes
  copy:
    src: ssl/private/flocker-plugin.key
    dest: /etc/flocker/plugin.key
    mode: 0600
  when: flocker_mode == "agent"
  tags:
    - docker
    - flocker

# Config flocker agent
- name: config flocker agent 
  sudo: yes
  template: 
    src: agent.yml.j2 
    dest: /etc/flocker/agent.yml
  when: flocker_mode == "agent"
  tags:
    - docker
    - flocker

# Start flocker control serivce
- name: enable flocker control service
  sudo: yes
  service:
    name: flocker-control
    enabled: yes
    state: started
  when: flocker_mode == "control"
  tags:
    - docker
    - flocker

# Start flocker agent service
- name: enable flocker dataset agent service
  sudo: yes
  service:
    name: flocker-dataset-agent
    enabled: yes
    state: started
  when: flocker_mode == "agent"
  tags:
    - docker
    - flocker

- name: enable flocker container agent service
  sudo: yes
  service:
    name: flocker-container-agent
    enabled: yes
    state: started
  when: flocker_mode == "agent"
  tags:
    - docker
    - flocker

- name: enable flocker docker plugin
  sudo: yes
  service:
    name: flocker-docker-plugin 
    enabled: yes
    state: started
  when: flocker_mode == "agent"
  tags:
    - docker
    - flocker

- include: flocker_ui.yml
